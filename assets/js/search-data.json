{
  
    
        "post0": {
            "title": "Homework 1",
            "content": "HW1. Math is Fun . Solve 3 problems from the Eular Project using Python. Of the 3 problems, one must have been solved by fewer than 25,000 people, 1 fewer than 100,000 people and one fewer than 500,000 people. . Problem 10. Summation of primes (solved by 330,399) . The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. Find the sum of all the primes below two million. . Approach . If a number is not divided by all prime numbers that are not greater than its square root, then it is a prime number. To calculate the sum of all prime numbers from 2 to 2,000,000, a prime number list can be created and used to judge the next number. If the next number is prime, then add it to the list. Since only singular numbers after 2 can be prime, the step size can be set to 2 during iteration. The sum of all numbers in the prime number list is final answer. . def summation_of_primes(limit): &quot;&quot;&quot; Use the first three prime numbers to find all prime numbers from 2 to 200,000 and store them in a list, returning the sum of prime numbers in the list. Parameters - limit : int The limitation of all prime numbers. prime : list Store all prime numbers. x : binary int 0 or 1 converted from boolean. Returns - int The summation of all prime numbers from 2 to 200,000. See Also -- math.sqrt: Square root of any number. &quot;&quot;&quot; prime = [2,3,5] for num in range(7,limit,2): x = 1 for p in prime: if(p &gt; math.sqrt(num)+1): break if(num % p == 0): x = 0 break if x == 1: prime.append(num) return np.sum(prime) . Output . &gt;&gt;&gt; print(summation_of_primes(200000)) 1709600813 . Thus, the sum of all the primes below two million is 1709600813. . Problem 45. Triangular, pentagonal, and hexagonal (solved by 71,490) . Triangle, pentagonal, and hexagonal numbers are generated by the following formulae: . Shape Formula Number . Triangle | Tn=n(n+1)/2 | 1, 3, 6, 10, 15, … | . Pentagonal | Pn=n(3n−1)/2 | 1, 5, 12, 22, 35, … | . Hexagonal | Hn=n(2n−1) | 1, 6, 15, 28, 45, … | . It can be verified that T285 = P165 = H143 = 40755. Find the next triangle number that is also pentagonal and hexagonal. . Approach . First of all, it can be observed that a hexagonal number is a triangular number at an odd position. In fact, for any odd number (2n−1), after substituting it into the triangle number, we get (2n−1)(2n−1+1)/2=n(2n−1) which is a hexagonal number. Therefore, the hexagonal number is a subset of the triangular number. When a number is a hexagonal number, we no longer need to verify whether it is a triangular number. We sequentially generate hexagonal numbers from n=144, and then determine whether the generated number is a pentagonal number, if it is not, then generate the next number, if it is, then return the hexagonal number, which is the answer. . To determine whether a number is a pentagonal number, we find the inverse function of the general term of the pentagonal number, that is, n=((1+24x)1/2+1)/6. Only when ((1+24x)1/2+1) mod 6 = 0, the number is a pentagonal number. . def tri_penta_hexa(n): &quot;&quot;&quot; Find the next hexagonal number and determine if it is also a pentagonal number. Parameters - n : int The starting hexagonal number. x : binary int 0 or 1 converted from boolean. Returns - int The next triangle number that is also pentagonal and hexagonal. See Also -- math.sqrt: Square root of any number. &quot;&quot;&quot; x = 1 while x==1: h = n*(2*n-1) if (math.sqrt(24*h+1)+1)%6==0: return h else: n += 1 . Output . &gt;&gt;&gt; print(tri_penta_hexa(144)) 1533776805 . Thus, the next triangle number that is also pentagonal and hexagonal is 1533776805. . Problem 75. Singular integer right triangles (solved by 17,927) . It turns out that 12 cm is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples. . 12 cm: (3,4,5); 24 cm: (6,8,10); 30 cm: (5,12,13); 36 cm: (9,12,15); 40 cm: (8,15,17); 48 cm: (12,16,20) . In contrast, some lengths of wire, like 20 cm, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using 120 cm it is possible to form exactly three different integer sided right angle triangles. . 120 cm: (30,40,50), (20,48,52), (24,45,51) . Given that L is the length of the wire, for how many values of L ≤ 1,500,000 can exactly one integer sided right angle triangle be formed? . Approach . According to Euclidean formula, assuming m&gt;n&gt;0, gcd(m,n)=1 and m,n are not all odd numbers, then m,n can form a primitive Pythagorean triple (a,b,c), where a,b,c are mutually prime. a is the long leg, b is the short leg, and c is the hypotenuse, then: . a = m2−n2, b = 2mn, c = m2+n2 . Multiply (a,b,c) by k (k≥1) at the same time, then (ka, kb, kc) is also a Pythagorean triple. The perimeter of the Pythagorean tripe is: . p = ka+kb+kc = k(a+b+c) = 2km(m+n) . Therefore, as long as we get the perimeter of a set of primitive Pythagorean triple numbers, we can get the perimeters of other Pythagorean triple numbers. . According to the question, the maximum perimeter can only be 1.5 million: 2km(m+n) ≤ 1500000 ⇒ m ≤ (1500000/2k)1/2 ≤ (1500000/2)1/2 . With the equation above, we can get the m, n values in the range, calculate the perimeter, count the number of times each perimeter appears, and return the number of perimeters that only appear once, which is the answer. . def singular_integer_right_triangles(limit): &quot;&quot;&quot; Find primitive Pythagorean triple, calculate the perimeter, count the number of times each perimeter appears, and return the number of perimeters that only appear once. Parameters - limit : int The limitation of triangle perimeter. arr : list Store the perimeters less or equal to the limitation. k : int Multiply with primitive Pythagorean triple to get all Pythagorean triples. c : int Count the number of occurrences of each perimeter. Returns - int Sum of the number of triangle perimeters that only appear once. See Also -- math.sqrt: Square root of any number. math.gcd: Greatest common divisor of the two integers Counter: Container that keeps track of how many times equivalent values are added. &quot;&quot;&quot; arr = [] m_max = int(math.sqrt(limit/2)) for m in range(2, m_max+1): for n in range(1, m): if (m + n) % 2 == 1 and math.gcd(m, n) == 1: p = 2*m*(m+n) k = 1 while k*p &lt;= limit: arr.append(k*p) k += 1 c = Counter(arr) return len([x for x in c.values() if x==1]) . Output . &gt;&gt;&gt; print(singular_integer_right_triangles(1500000)) 161667 . Thus, given that L is the length of the wire, 161667 values of L ≤ 1,500,000 can exactly form one integer sided right angle triangle. .",
            "url": "https://zhoux811.github.io/my_fastai/2021/09/03/hw1.html",
            "relUrl": "/2021/09/03/hw1.html",
            "date": " • Sep 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://zhoux811.github.io/my_fastai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://zhoux811.github.io/my_fastai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zhoux811.github.io/my_fastai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zhoux811.github.io/my_fastai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}